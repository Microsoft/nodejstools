<?xml version='1.0' encoding='UTF-8'?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LaunchUrlToolTip" xml:space="preserve">
    <value>指定要在浏览器中打开的 URL，如未指定，则会使用 http://localhost:port。\r\n如果指定的是端口，则其也需在此处指定。</value>
  </data>
  <data name="NodeExeArguments" xml:space="preserve">
    <value>传递到 Node.exe 的参数</value>
  </data>
  <data name="NodeExeArgumentsDescription" xml:space="preserve">
    <value>指定提供给 node.exe 的选项，例如 -e or -i。</value>
  </data>
  <data name="NodeExeArgumentsToolTip" xml:space="preserve">
    <value>指定提供给 node.exe 的选项，例如 -e or -i。</value>
  </data>
  <data name="NodeExePath" xml:space="preserve">
    <value>Node.exe 路径</value>
  </data>
  <data name="NodeExePathToolTip" xml:space="preserve">
    <value>指定 node.exe 可执行文件的路径。</value>
  </data>
  <data name="NodejsPort" xml:space="preserve">
    <value>Node.js 端口</value>
  </data>
  <data name="NodejsNotInstalled" xml:space="preserve">
    <value>计算机上无法找到 Node.js 运行时。请从 https://nodejs.org 下载并安装 Node.js 最新版本，或在 Visual Studio Node Project 的属性页面中指定 Node.exe 的位置。</value>
  </data>
  <data name="NodejsPortToolTip" xml:space="preserve">
    <value>指定 process.env.port 使用的端口号；如未指定，则会生成随机端口。</value>
  </data>
  <data name="NpmPackageName" xml:space="preserve">
    <value>包名称</value>
  </data>
  <data name="NpmPackageNameDescription" xml:space="preserve">
    <value>如在 package.json 中指定的包名称。</value>
  </data>
  <data name="NpmPackageVersion" xml:space="preserve">
    <value>版本</value>
  </data>
  <data name="NpmPackageVersionDescription" xml:space="preserve">
    <value>包的安装版本。</value>
  </data>
  <data name="NpmPackageRequestedVersionRange" xml:space="preserve">
    <value>请求版本</value>
  </data>
  <data name="NpmPackageRequestedVersionRangeDescription" xml:space="preserve">
    <value>属于父包或项目的 package.json 中请求的包版本。</value>
  </data>
  <data name="NpmPackageNewVersionAvailable" xml:space="preserve">
    <value>已有更新的版本</value>
  </data>
  <data name="NpmPackageNewVersionAvailableDescription" xml:space="preserve">
    <value>指示包是否已有更新的版本。</value>
  </data>
  <data name="NpmPackageDescription" xml:space="preserve">
    <value>说明</value>
  </data>
  <data name="NpmPackageDescriptionDescription" xml:space="preserve">
    <value>包说明。</value>
  </data>
  <data name="NpmPackageKeywords" xml:space="preserve">
    <value>关键字</value>
  </data>
  <data name="NpmPackageKeywordsDescription" xml:space="preserve">
    <value>包关键字。</value>
  </data>
  <data name="NpmPackageAuthor" xml:space="preserve">
    <value>作者</value>
  </data>
  <data name="NpmPackageAuthorDescription" xml:space="preserve">
    <value>包的主要作者或原作者；可能也存在其他贡献者。</value>
  </data>
  <data name="NpmPackagePath" xml:space="preserve">
    <value>路径</value>
  </data>
  <data name="NpmPackagePathDescription" xml:space="preserve">
    <value>磁盘上包的位置。</value>
  </data>
  <data name="NpmPackageType" xml:space="preserve">
    <value>包类型</value>
  </data>
  <data name="NpmPackageTypeDescription" xml:space="preserve">
    <value>指示项目中的包是全局安装还是本地安装以及它是否是子包。</value>
  </data>
  <data name="NpmPackageLinkStatus" xml:space="preserve">
    <value>链接状态</value>
  </data>
  <data name="NpmPackageLinkStatusDescription" xml:space="preserve">
    <value>指示是否已从全局安装的包中链接包。</value>
  </data>
  <data name="NpmPackageIsListedInParentPackageJson" xml:space="preserve">
    <value>列为依赖项</value>
  </data>
  <data name="NpmPackageIsListedInParentPackageJsonDescription" xml:space="preserve">
    <value>指示包是否列为 package.json 依赖项。</value>
  </data>
  <data name="NpmPackageIsMissing" xml:space="preserve">
    <value>缺失</value>
  </data>
  <data name="NpmPackageIsMissingDescription" xml:space="preserve">
    <value>指示包是否是缺失的依赖项。</value>
  </data>
  <data name="NpmPackageIsDevDependency" xml:space="preserve">
    <value>开发依赖项</value>
  </data>
  <data name="NpmPackageIsDevDependencyDescription" xml:space="preserve">
    <value>指示包是否是开发依赖项。</value>
  </data>
  <data name="NpmPackageIsOptionalDependency" xml:space="preserve">
    <value>可选依赖项</value>
  </data>
  <data name="NpmPackageIsOptionalDependencyDescription" xml:space="preserve">
    <value>指示包是否是可选依赖项。</value>
  </data>
  <data name="NpmPackageIsBundledDependency" xml:space="preserve">
    <value>捆绑依赖项</value>
  </data>
  <data name="NpmPackageIsBundledDependencyDescription" xml:space="preserve">
    <value>指示包是否为捆绑依赖项。</value>
  </data>
  <data name="CategoryVersion" xml:space="preserve">
    <value>版本</value>
  </data>
  <data name="CategoryStatus" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="PackageTypeLocal" xml:space="preserve">
    <value>本地</value>
  </data>
  <data name="PackageTypeLocalSubpackage" xml:space="preserve">
    <value>本地子包</value>
  </data>
  <data name="LinkStatusNotApplicableSubPackages" xml:space="preserve">
    <value>不适用于子包。</value>
  </data>
  <data name="LinkStatusUnknown" xml:space="preserve">
    <value>未知</value>
  </data>
  <data name="RequestedVersionRangeNone" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="NpmNodePackageInstallation" xml:space="preserve">
    <value>包安装</value>
  </data>
  <data name="NpmNodePackageInstallationDescription" xml:space="preserve">
    <value>指示节点管理本地还是全局 npm 包安装。</value>
  </data>
  <data name="NpmNodePath" xml:space="preserve">
    <value>路径</value>
  </data>
  <data name="NpmNodePathDescription" xml:space="preserve">
    <value>npm 包安装的基路径。</value>
  </data>
  <data name="PackageInstallationLocal" xml:space="preserve">
    <value>本地</value>
  </data>
  <data name="PropertiesClassLocalPackage" xml:space="preserve">
    <value>本地包属性</value>
  </data>
  <data name="PropertiesClassLocalSubPackage" xml:space="preserve">
    <value>本地子包属性</value>
  </data>
  <data name="PropertiesClassNpm" xml:space="preserve">
    <value>npm 包属性</value>
  </data>
  <data name="ScriptArgumentsToolTip" xml:space="preserve">
    <value>指定启动时传递给脚本的参数。</value>
  </data>
  <data name="ScriptFileTooltip" xml:space="preserve">
    <value>指定脚本在启动时运行。</value>
  </data>
  <data name="StartBrowserToolTip" xml:space="preserve">
    <value>选中后，在启动时 web 浏览器会打开</value>
  </data>
  <data name="WorkingDirToolTip" xml:space="preserve">
    <value>指定启动 node.exe 进程所在的工作目录。</value>
  </data>
  <data name="NodeExeDoesntExist" xml:space="preserve">
    <value>项目当前配置为在“{0}”中查找 Node.exe，但该文件不存在。</value>
  </data>
  <data name="NodejsToolsForVisualStudio" xml:space="preserve">
    <value>Node.js Tools for Visual Studio</value>
  </data>
  <data name="NodeExePathNotFound" xml:space="preserve">
    <value>指定的 Node.js 解释器不存在。</value>
  </data>
  <data name="NodejsNotInstalledShort" xml:space="preserve">
    <value>在计算机上未检测到 Node.js</value>
    <comment>Used in general property page when Node.exe isn't found</comment>
  </data>
  <data name="InvalidPortNumber" xml:space="preserve">
    <value>无效的端口号 - 端口应仅包含数字。</value>
  </data>
  <data name="WorkingDirInvalidOrMissing" xml:space="preserve">
    <value>指定的工作目录无效或缺失。</value>
  </data>
  <data name="CatalogLoadingDefault" xml:space="preserve">
    <value>正在加载已发布的包列表...</value>
  </data>
  <data name="NoKeywordsInPackage" xml:space="preserve">
    <value>(此包不含关键字。)</value>
  </data>
  <data name="PackageCatalogRefreshing" xml:space="preserve">
    <value>当前正在刷新</value>
  </data>
  <data name="PackageCatalogRefresh0Days" xml:space="preserve">
    <value>今天 {0:t}</value>
  </data>
  <data name="PackageCatalogRefresh1Day" xml:space="preserve">
    <value>昨天 {0:t}</value>
  </data>
  <data name="PackageCatalogRefresh2To7Days" xml:space="preserve">
    <value>{0} 天前</value>
  </data>
  <data name="PackageCatalogRefresh1Week" xml:space="preserve">
    <value>1 周多以前</value>
  </data>
  <data name="PackageCatalogRefresh2Weeks" xml:space="preserve">
    <value>2 周多以前</value>
  </data>
  <data name="PackageCatalogRefresh3Weeks" xml:space="preserve">
    <value>3 周多以前</value>
  </data>
  <data name="PackageCatalogRefresh1Month" xml:space="preserve">
    <value>1 个多月以前</value>
  </data>
  <data name="PackageCatalogRefresh3Months" xml:space="preserve">
    <value>3 个多月以前</value>
  </data>
  <data name="NpmCancelledWithErrors" xml:space="preserve">
    <value>{0} 已取消，出现错误 - 请查看“输出”窗口了解详细信息</value>
  </data>
  <data name="NpmCompletedWithErrors" xml:space="preserve">
    <value>{0} 已完成，出现错误 - 请查看“输出”窗口了解详细信息</value>
  </data>
  <data name="NpmCancelled" xml:space="preserve">
    <value>{0} 已取消</value>
  </data>
  <data name="NpmSuccessfullyCompleted" xml:space="preserve">
    <value>{0} 已成功完成</value>
  </data>
  <data name="NpmStatusReady" xml:space="preserve">
    <value>就绪</value>
  </data>
  <data name="NpmStatusReadyWithErrors" xml:space="preserve">
    <value>就绪 - 命令完成，出现错误 ({0})</value>
  </data>
  <data name="NpmStatusExecuting" xml:space="preserve">
    <value>正在执行: {0}</value>
  </data>
  <data name="NpmStatusExecutingQueued" xml:space="preserve">
    <value>正在执行: {0} ({1} 个命令处于队列中)</value>
  </data>
  <data name="NpmStatusExecutingErrors" xml:space="preserve">
    <value>遇到错误({1}) - 正在执行: {0}</value>
  </data>
  <data name="NpmStatusExecutingQueuedErrors" xml:space="preserve">
    <value>遇到错误({2}) - 正在执行: {0} ({1} 个命令处于队列中)</value>
  </data>
  <data name="TestFramework" xml:space="preserve">
    <value>测试架构</value>
  </data>
  <data name="TestFrameworkDescription" xml:space="preserve">
    <value>指定此文件夹适用的测试架构。</value>
  </data>
  <data name="DebuggerPort" xml:space="preserve">
    <value>指定用于与调试器通信的端口</value>
  </data>
  <data name="EnvironmentVariables" xml:space="preserve">
    <value>指定要在窗体的衍生进程中设置的环境变量:

NAME1=value1
NAME2=value2
...</value>
  </data>
  <data name="DebuggerConnectionClosed" xml:space="preserve">
    <value>调试器连接已关闭。</value>
  </data>
  <data name="DebuggerModuleUpdateFailed" xml:space="preserve">
    <value>无法更新文件内容。</value>
  </data>
  <data name="NodejsNotSupported" xml:space="preserve">
    <value>不支持此版本的 Node.js ({0})。请升级到 Node.js v0.10.20 或更高版本。</value>
  </data>
  <data name="PackageCatalogRefreshFailed" xml:space="preserve">
    <value>刷新失败 - 请查看下方输出了解详细信息</value>
  </data>
  <data name="ReplInitializationMessage" xml:space="preserve">
    <value>Node.js 交互窗口。键入 .help 可获取命令列表。</value>
  </data>
  <data name="ReplWindowNpmInitNoYesFlagWarning" xml:space="preserve">
    <value>请运行 &quot;npm init -y&quot; 创建新的 package.json 文件。</value>
  </data>
  <data name="NodeExePathDescription" xml:space="preserve">
    <value>指定 node.exe 可执行文件的路径。</value>
  </data>
  <data name="NodejsPortDescription" xml:space="preserve">
    <value>指定 process.env.port 使用的端口号；如未指定，则会生成随机端口。</value>
  </data>
  <data name="NpmOutputPaneTitle" xml:space="preserve">
    <value>Npm</value>
  </data>
  <data name="NpmPackageInstallHelpMessage" xml:space="preserve">
    <value>(输入以上参数)</value>
  </data>
  <data name="NpmReplCommandCompletedWithErrors" xml:space="preserve">
    <value>{0} 已完成，出现错误</value>
  </data>
  <data name="LongPathWarningTitle" xml:space="preserve">
    <value>路径过长警告</value>
  </data>
  <data name="LongPathWarningText" xml:space="preserve">
    <value>项目文件夹包含一个或多个超过 &lt;a href=&quot;#msdn&quot;&gt;260 个字符限制&lt;/a&gt;的路径。Visual Studio &lt;a href=&quot;#uservoice&quot;&gt;不完全支持&lt;/a&gt;此类项目。生成和发布项目时可能会出现问题，或者会影响 Visual Studio 和 Node.js Tools 的其他功能。</value>
  </data>
  <data name="LongPathShowPathsExceedingTheLimit" xml:space="preserve">
    <value>显示超过限制的路径(&amp;P)</value>
  </data>
  <data name="LongPathHidePathsExceedingTheLimit" xml:space="preserve">
    <value>隐藏超过限制的路径(&amp;P)</value>
  </data>
  <data name="LongPathNpmDedupe" xml:space="preserve">
    <value>运行项目上的 &quot;npm &amp;dedupe&quot; </value>
  </data>
  <data name="LongPathNpmDedupeDetail" xml:space="preserve">
    <value>在某些情况下，删除重复的包可减少 node_modules 中的嵌套数量，从而能够有效地解决该问题。</value>
  </data>
  <data name="LongPathDoNothingButWarnNextTime" xml:space="preserve">
    <value>不采取任何操作，下次发生时显示警告(&amp;W)</value>
  </data>
  <data name="LongPathDoNothingAndDoNotWarnAgain" xml:space="preserve">
    <value>不采取任何操作，不再显示警告(&amp;N)</value>
  </data>
  <data name="LongPathDoNothingAndDoNotWarnAgainDetail" xml:space="preserve">
    <value>在“工具”→“选项”→“Node.js Tools”→“常规”中，可以重新启用此选项。</value>
  </data>
  <data name="LongPathFooter" xml:space="preserve">
    <value>&lt;a href=&quot;#help&quot;&gt;获取详细信息&lt;/a&gt;</value>
  </data>
  <data name="LongPathClickToCopy" xml:space="preserve">
    <value>复制完整路径</value>
  </data>
  <data name="LongPathNpmDedupeDidNotHelp" xml:space="preserve">
    <value>抱歉，运行 &quot;npm dedupe&quot; 未能解决该问题。有关其他可能的解决方法，请参阅&lt;a href=&quot;#help&quot;&gt;文档&lt;/a&gt;。</value>
  </data>
  <data name="CacheDirectoryClearFailedTitle" xml:space="preserve">
    <value>无法清除 Node.js 缓存目录</value>
  </data>
  <data name="CacheDirectoryClearFailedCaption" xml:space="preserve">
    <value>无法清除 Node.js 缓存目录。请尝试手动删除目录: {0}</value>
  </data>
  <data name="UpgradedEnvironmentVariables" xml:space="preserve">
    <value>已将 &lt;EnvironmentVariables&gt; 属性替换为 &lt;Environment&gt;。此项目不再适用于 NTVS 1.0 beta 2 或更低版本。</value>
  </data>
  <data name="StatusAnalysisUpToDate" xml:space="preserve">
    <value>Node.js 代码分析为最新版本，已在 {1} 中分析 {0:N0} 个功能</value>
  </data>
  <data name="IncludeNodeModulesCancelTitle" xml:space="preserve">
    <value>不采取任何操作(推荐)</value>
  </data>
  <data name="IncludeNodeModulesContent" xml:space="preserve">
    <value>将 &quot;node_modules&quot; 包含在项目中通常是没有必要的，并且可能会降低 Visual Studio 的性能。若不将其包含在项目中，仍可继续使用和部署 &quot;node_modules&quot; 的包。</value>
  </data>
  <data name="IncludeNodeModulesIncludeDescription" xml:space="preserve">
    <value>此操作所用的时间可能较长，在此期间，Visual Studio 可能无法使用。</value>
  </data>
  <data name="IncludeNodeModulesIncludeTitle" xml:space="preserve">
    <value>将 &quot;node_modules&quot; 文件夹包含在项目中</value>
  </data>
  <data name="IncludeNodeModulesInformation" xml:space="preserve">
    <value>&lt;a href=&quot;http://go.microsoft.com/fwlink/?LinkID=518083&quot;&gt;详细信息&lt;/a&gt;</value>
  </data>
  <data name="RemoteDebugProxyFileDoesNotExist" xml:space="preserve">
    <value>远程调试代理“{0}”不存在。</value>
  </data>
  <data name="RemoteDebugProxyFolderDoesNotExist" xml:space="preserve">
    <value>无法找到 RemoteDebugProxyFolder</value>
  </data>
  <data name="TypingsToolTypingsInstallCompleted" xml:space="preserve">
    <value>已成功安装 IntelliSense 的 typing 文件</value>
  </data>
  <data name="TypingsToolNotInstalledError" xml:space="preserve">
    <value>无法找到用于 IntelliSense 的 Typings 包管理器工具</value>
  </data>
  <data name="TypingsToolTypingsInstallErrorOccurred" xml:space="preserve">
    <value>安装用于 IntelliSense 的 typings 时出现错误</value>
  </data>
  <data name="TypingsInfoBarSpan1" xml:space="preserve">
    <value>Node.js IntelliSense 添加了一个</value>
  </data>
  <data name="TypingsInfoBarSpan2" xml:space="preserve">
    <value>typings 文件夹</value>
  </data>
  <data name="TypingsInfoBarSpan3" xml:space="preserve">
    <value>到项目中</value>
  </data>
  <data name="TypingsOpenOptionsText" xml:space="preserve">
    <value>自定义...</value>
  </data>
  <data name="StatusTypingsLoaded" xml:space="preserve">
    <value>Node.js IntelliSense typings 文件夹处于最新状态</value>
  </data>
  <data name="StatusTypingsLoading" xml:space="preserve">
    <value>正在加载 npm 包的 Node.js IntelliSense typings...</value>
  </data>
  <data name="TypingsToolInstallFailed" xml:space="preserve">
    <value>无法安装用于IntelliSense 的 Typings 工具。请确保已正确安装 Node.js</value>
  </data>
  <data name="TypingsToolCouldNotStart" xml:space="preserve">
    <value>无法启动用于 IntelliSense 的 Typings 工具</value>
  </data>
  <data name="TypeScriptMinVersionNotInstalled" xml:space="preserve">
    <value>Node.js Tools 要求 TypeScript for Visual Studio {0} 或更高版本。请确保已安装 TypeScript</value>
  </data>
  <data name="ImportingProjectStatusText" xml:space="preserve">
    <value>正在导入项目...</value>
  </data>
  <data name="ImportingProjectErrorStatusText" xml:space="preserve">
    <value>出现错误，且项目未创建。</value>
  </data>
  <data name="InteractiveWindowFailedToStartProcessErrorMessage" xml:space="preserve">
    <value>无法启动交互进程: {0}{1}{2}</value>
  </data>
  <data name="InteractiveWindowNoProcessErrorMessage" xml:space="preserve">
    <value>当前交互窗口已断开连接 - 请重置进程。</value>
  </data>
  <data name="InteractiveWindowProcessExitedMessage" xml:space="preserve">
    <value>进程已退出</value>
  </data>
  <data name="InteractiveWindowTitle" xml:space="preserve">
    <value>Node.js 交互窗口</value>
  </data>
  <data name="ImportingProjectAccessErrorStatusText" xml:space="preserve">
    <value>部分文件路径无法访问。{0}尝试将源代码移动到可读写文件的位置。</value>
  </data>
  <data name="ImportingProjectUnexpectedErrorMessage" xml:space="preserve">
    <value>创建项目时发生意外错误 {0}。</value>
  </data>
  <data name="NodeModulesCouldNotParsePackageJsonErrorMessageText" xml:space="preserve">
    <value>无法从项目中分析 {0}。请修复错误，然后重试。</value>
  </data>
  <data name="NpmNotInstalledMessageCaption" xml:space="preserve">
    <value>npm 未安装</value>
  </data>
  <data name="NpmNotInstalledMessageText" xml:space="preserve">
    <value>无法找到 npm.cmd。请确保已安装最新版本的 node.js，并已在项目属性中指定 node.exe 的位置，或者指定其在系统路径中可用。

尝试执行 npm.cmd 时出现以下错误:

{0}</value>
  </data>
  <data name="AzureRemoteDebugWaitCaption" xml:space="preserve">
    <value>Azure 远程调试</value>
  </data>
  <data name="AzureRemoteDebugWaitMessage" xml:space="preserve">
    <value>正在附加到 Azure 网站: {0}</value>
  </data>
  <data name="AzureRemoveDebugCouldNotAttachToWebsiteErrorMessage" xml:space="preserve">
    <value>无法附加到 Azure 网站 {0}  上的 node.exe 进程。

从 web.config 中检索 websocket 调试代理信息时出错。</value>
  </data>
  <data name="AzureRemoveDebugCouldNotAttachToWebsiteExceptionErrorMessage" xml:space="preserve">
    <value>无法附加到 Azure 网站: {0}</value>
  </data>
  <data name="RemoteDebugCheckProxyAndPortErrorMessage" xml:space="preserve">
    <value>确保此进程在远程调试代理(RemoteDebug.js)后面运行，以及调试器端口(默认为 {0})在目标主机上为打开状态。</value>
  </data>
  <data name="RemoteDebugCouldNotAttachErrorMessage" xml:space="preserve">
    <value>无法附加到 {0}{1} 处的 Node.js 进程

</value>
  </data>
  <data name="RemoteDebugEnableWebSocketsErrorMessage" xml:space="preserve">
    <value>请确保在调试配置中部署了 Azure 网站，且在 Azure 管理门户中对其启用了 Web 套接字。</value>
  </data>
  <data name="RemoteDebugUnsupportedPlatformErrorMessage" xml:space="preserve">
    <value>仅 Windows 8 及更高系统支持 node.js Microsoft Azure 应用程序的远程调试。</value>
  </data>
  <data name="DebugCouldNotResolveStartupFileErrorMessage" xml:space="preserve">
    <value>通过右键单击解决方案资源管理器中的文件，然后选择“设置为 Node.js 启动文件”或通过在项目属性中修改配置，选择启动文件进行启动</value>
  </data>
  <data name="DebugInterpreterDoesNotExistErrorMessage" xml:space="preserve">
    <value>解释器“{0}”不存在。</value>
  </data>
  <data name="DebugTypeScriptCombineNotSupportedWarningMessage" xml:space="preserve">
    <value>此 TypeScript 项目已启用选项“将 Javascript 输出合并到文件中”。该选项不受 NTVS 调试程序支持，并且可能导致断点、步进和调试工具窗口出现异常行为。是否确实要启动调试?</value>
  </data>
  <data name="DebugWorkingDirectoryDoesNotExistErrorMessage" xml:space="preserve">
    <value>工作目录“{0}”不存在。</value>
  </data>
  <data name="DependencyNodeLabelBundled" xml:space="preserve">
    <value>捆绑</value>
  </data>
  <data name="DependencyNodeLabelMissing" xml:space="preserve">
    <value>缺失</value>
  </data>
  <data name="DependencyNodeLabelNotListed" xml:space="preserve">
    <value>未在 {0} 中列出</value>
  </data>
  <data name="DependencyNodeModuleDoesNotExist" xml:space="preserve">
    <value>模块路径不存在:
{0}</value>
  </data>
  <data name="ErrorInvalidLaunchUrl" xml:space="preserve">
    <value>启动 URL“{0}”无效</value>
  </data>
</root>
