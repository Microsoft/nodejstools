<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Workspace.Extensions.VS</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.IVsBuildMessagesManager">
            <summary>
            The VS Build Messages manager
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.IVsBuildMessagesManager.OnAddBuildMessageEntry">
            <summary>
            Fired when a new BuildMessage is being created
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.IVsBuildMessagesManager.AddBuildMessageService(Microsoft.VisualStudio.Workspace.Build.IBuildMessageService)">
            <summary>
            Add a Build message service to VS
            </summary>
            <param name="service">The workspace context build message service</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.IVsBuildMessagesManager.RemoveBuildMessageService(Microsoft.VisualStudio.Workspace.Build.IBuildMessageService)">
            <summary>
            Remove a Build message service to VS
            </summary>
            <param name="service">The workspace context build message service</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.IVsBuildMessagesManager.ClearAllMessages">
            <summary>
            Clear all messages
            </summary>
            <returns>Completion task</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.VsBuildMessageEventArgs">
            <summary>
            VsBuildMessageEventArgs class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.VsBuildMessageEventArgs.#ctor(Microsoft.VisualStudio.Workspace.Build.BuildMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.VsBuildMessageEventArgs"/> class.
            </summary>
            <param name="buildMessage">The build message to add</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.VsBuildMessageEventArgs.BuildMessage">
            <summary>
            The build message to add
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.Build.VsBuildMessageEventArgs.IsHandled">
            <summary>
            If this build message was handled somewhere
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.ExportVsDebugLaunchTargetAttribute">
            <summary>
            Exports an <see cref="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.IVsDebugLaunchTargetProvider"/> to the MEF catalog
            with metadata as described by <see cref="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.IVsDebugLaunchTargetProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.ExportVsDebugLaunchTargetAttribute.#ctor(System.String,System.String[],Microsoft.VisualStudio.Workspace.ProviderPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.ExportVsDebugLaunchTargetAttribute"/> class.
            </summary>
            <param name="type">The unique type for this Provider</param>
            <param name="supportedFileExtensions">
            The set of file extensions (including the leading period) that this debug provider
            is capable of.</param>
            <param name="priority">Provider priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.ExportVsDebugLaunchTargetAttribute.OptionFlagsInternal">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.IVsDebugLaunchTargetProvider">
            <summary>
            IVsDebugLaunchTargetProvider interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.IVsDebugLaunchTargetProvider.SetupDebugTargetInfo(Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo@,Microsoft.VisualStudio.Workspace.Debug.DebugLaunchActionContext)">
            <summary>
            Allow customization to happen on a VsDebugTargetInfo struct
            </summary>
            <param name="vsDebugTargetInfo">The VS specific target info struct</param>
            <param name="debugLaunchContext">Debug launch being passed</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.Debug.IVsDebugLaunchTargetProviderMetadata">
            <summary>
            IVsDebugLaunchTargetProviderMetadata interface definition
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.FileIconsChangedEvent">
            <summary>
            Event arguments for IVsFileIconProvider.OnFileIconsChanged
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.FileIconsChangedEvent.#ctor(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Workspace.Extensions.VS.FileIconsChangedEvent"/> class.
            </summary>
            <param name="changedFiles">list of files that's icons might be updated. Can be null</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.FileIconsChangedEvent.Files">
            <summary>
            changed files. If null OpenFolder tree view will refresh all nodes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.IVsCommandItem">
            <summary>
            Represents an item that should be displayed in the Visual Studio host.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.IVsCommandItem.CommandGroup">
            <summary>
            Gets the command group for a command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.IVsCommandItem.CommandId">
            <summary>
            Gets the command id for a specific command in a group.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Workspace.Extensions.VS.IVsFileIconProvider">
            <summary>
            Icons provider extensibility for OpenFolder tree view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Workspace.Extensions.VS.IVsFileIconProvider.OnFileIconsChanged">
            <summary>
            OpenFolder tree view will subscribe on this event and refresh affected files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Workspace.Extensions.VS.IVsFileIconProvider.GetIconForFile(System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@,System.Int32@)">
            <summary>
            Gets a custom icon for a file.
            </summary>
            <param name="fullPath">full path to file</param>
            <param name="imageMoniker">image moniker to use for that file</param>
            <param name="priority">arbitrary priority number. If more than one provider respond to a file the higher priortity will win.</param>
            <returns>Returns true if fullPath it handled, false otherwise</returns>
        </member>
    </members>
</doc>
